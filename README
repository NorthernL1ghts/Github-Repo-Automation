# GitHub Repository Automation Script

This Python script automates the creation of new GitHub repositories with randomized names, a basic README.md, .gitignore file for Python, and an MIT license. It is designed for developers who need to quickly set up new repositories with minimal manual effort.

## Table of Contents

- [Introduction](#introduction)
- [Features](#features)
- [Prerequisites](#prerequisites)
- [Installation](#installation)
- [Usage](#usage)
- [Contributing](#contributing)
- [License](#license)

## Introduction

The GitHub Repository Automation Script is a tool to streamline the creation of new repositories on GitHub. It generates repositories with random yet meaningful names, initializes them with essential files, and ensures they are private. This can save time for developers and teams by automating repetitive tasks involved in setting up new projects.

## Features

- **Randomized Repository Names**: Generates unique repository names using combinations of adjectives and nouns.
- **Initialization with Essential Files**: Automatically creates repositories with a README.md, .gitignore for Python, and an MIT license.
- **Private Repositories**: Ensures that all created repositories are set to private.
- **Error Handling**: Includes robust error handling to manage API responses and update operations.

## Prerequisites

- Python 3.x installed on your system.
- A GitHub account with a personal access token. You can generate a token from your GitHub account settings.

## Installation

1. Clone the repository:

   ```bash
   git clone https://github.com/NorthernL1ghts/github-repo-automation.git
   cd github-repo-automation
   ```

2. Install the required dependencies:
   ```bash
   pip install requests
   ```

## Usage

1. Replace `'YOUR_GITHUB_TOKEN'` and `'NorthernL1ghts'` in the script with your actual GitHub token and username.

2. Run the script:
   ```bash
   python create_repo.py
   ```

### Code Functionality

- **GenerateRandomRepoName**: This function creates random repository names using combinations of adjectives and nouns.

  ```python
  def GenerateRandomRepoName():
      adjective = random.choice(adjectives)
      noun = random.choice(nouns)
      return f'{adjective}{noun}'
  ```

- **CreateGithubRepo**: This function sends a request to the GitHub API to create a new repository. It sets the repository to private and initializes it with a description, .gitignore, and MIT license.

  ```python
  def CreateGithubRepo():
      repo_name = GenerateRandomRepoName()
      url = f'https://api.github.com/user/repos'
      headers = {
          'Authorization': f'token {GITHUB_TOKEN}',
          'Accept': 'application/vnd.github.v3+json'
      }
      data = {
          'name': repo_name,
          'auto_init': True,
          'private': True,
          'description': f'This is a private repository named {repo_name}, created programmatically.',
          'gitignore_template': 'Python',
          'license_template': 'mit'
      }
      response = requests.post(url, headers=headers, json=data)
      if response.status_code == 201:
          print(f'Successfully created private repository: {repo_name}')
          CreateReadme(repo_name)
      else:
          print(f'Failed to create repository: {response.content}')
  ```

- **GetFileSha**: This function retrieves the `sha` of a file, necessary for updating existing files on GitHub.

  ```python
  def GetFileSha(repo_name, file_path):
      url = f'https://api.github.com/repos/{GITHUB_USERNAME}/{repo_name}/contents/{file_path}'
      headers = {
          'Authorization': f'token {GITHUB_TOKEN}',
          'Accept': 'application/vnd.github.v3+json'
      }
      response = requests.get(url, headers=headers)
      if response.status_code == 200:
          return response.json()['sha']
      else:
          return None
  ```

- **CreateReadme**: This function updates the README.md file in the repository with detailed content.
  ```python
  def CreateReadme(repo_name):
      url = f'https://api.github.com/repos/{GITHUB_USERNAME}/{repo_name}/contents/README.md'
      headers = {
          'Authorization': f'token {GITHUB_TOKEN}',
          'Accept': 'application/vnd.github.v3+json'
      }
      sha = GetFileSha(repo_name, 'README.md')
      readme_content = f'# {repo_name}\n\nThis is a private repository named {repo_name}, created programmatically using a Python script. The repository includes a basic `.gitignore` file for Python projects and an MIT license.\n\n## Features\n\n- Automatically generated repository name\n- Initialized with a README, .gitignore, and MIT license\n- Private repository'
      data = {
          'message': 'Update README.md',
          'content': base64.b64encode(readme_content.encode('utf-8')).decode('utf-8'),
          'sha': sha
      }
      response = requests.put(url, headers=headers, json=data)
      if response.status_code == 200:
          print(f'Successfully updated README.md for repository: {repo_name}')
      else:
          print(f'Failed to update README.md: {response.content}')
  ```

## Contributing

If you would like to contribute to this project, please fork the repository and submit a pull request with your changes. For major changes, please open an issue first to discuss what you would like to change.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
